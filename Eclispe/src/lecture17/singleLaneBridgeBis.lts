//------ Constants & Ranges ---------
const N = 2
range T = 0..N
range ID = 1..N

const WestTurn = 0
const EastTurn = 1
range TurnOpts = WestTurn..EastTurn
//-----------------------------------

Car = (request -> enter -> exit -> Car). //Modified to get rid of warnings and achive politeness

property EntranceOrder = EntranceOrder[1],
EntranceOrder[id:ID] = ([id].enter -> EntranceOrder[id%N+1]).

property ExitOrder = ExitOrder[1],
ExitOrder[id:ID] = ([id].exit -> ExitOrder[id%N+1]).

||Convoy = ([ID]:Car).

||CheckConvoy = (Convoy || EntranceOrder || ExitOrder).

Entrance = Entrance[1],
Entrance[i:ID] = ([i].enter -> Entrance[i%N+1]).
Exit = Exit[1],
Exit[i:ID] = ([i].exit -> Exit[i%N+1]).
||FixedConvoy = ([ID]:Car || Entrance || Exit).
||CheckFixedConvoy = (FixedConvoy || EntranceOrder || ExitOrder).
||Cars = ({west, east}:FixedConvoy).

property SingleCarOnBridge = (west[ID].enter -> CountWest[1]
							| east[ID].enter -> CountEast[1]),
CountWest[i:ID] = (west[ID].enter -> CountWest[i+1]
					| when i>1 west[ID].exit -> CountWest[i-1]
					| when i==1 west[ID].exit -> SingleCarOnBridge),
CountEast[i:ID] = (east[ID].enter -> CountEast[i+1]
					| when i>1 east[ID].exit -> CountEast[i-1]
					| when i==1 east[ID].exit -> SingleCarOnBridge).
||CheckCars = (Cars||SingleCarOnBridge).


/*
//Previous (original) Brigde (from lecture 15)
Bridge = Bridge[0][0],
Bridge[nWest:T][nEast:T] = ( when (nWest == 0 && nEast<N) east[ID].enter -> Bridge[nWest][nEast + 1]
			   				   | when (nEast>0) east[ID].exit -> Bridge[nWest][nEast - 1]
			   			   | when (nEast==0 && nWest<N) west[ID].enter -> Bridge[nWest+1][nEast]
			   	           | when (nWest>0) west[ID].exit -> Bridge[nWest-1][nEast]).
*/

/*
//Bridge - politeness
Bridge = Bridge[0][0][0][0],
Bridge[nWest:T][nEast:T][nWestReq:T][nEastReq:T] = (
east[ID].request -> Bridge[nWest][nEast][nWestReq][nEastReq+1]
| west[ID].request -> Bridge[nWest][nEast][nWestReq+1][nEastReq]
| when (nWest == 0 && nEast < N && nWestReq==0) 
	east[ID].enter -> Bridge[nWest][nEast + 1][nWestReq][nEastReq]
| when (nEast > 0) 
	east[ID].exit -> Bridge[nWest][nEast - 1][nWestReq][nEastReq]
| when (nEast == 0 && nWest < N && nEastReq==0) 
	west[ID].enter -> Bridge[nWest+1][nEast][nWestReq][nEastReq]
| when (nWest > 0) 
	west[ID].exit -> Bridge[nWest-1][nEast][nWestReq][nEastReq]
).
*/
/*
//Bridge - strict order
Bridge = Bridge[0][0][0],
Bridge[nWest:T][nEast:T][turn:TurnOpts] = (
 when (nWest == 0 && nEast < N && turn == EastTurn) east[ID].enter -> Bridge[nWest][nEast + 1][WestTurn]
| when (nEast > 0) east[ID].exit -> Bridge[nWest][nEast - 1][WestTurn]
| when (nEast == 0 && nWest < N && turn == WestTurn) west[ID].enter -> Bridge[nWest+1][nEast][EastTurn]
| when (nWest > 0) west[ID].exit -> Bridge[nWest-1][nEast][EastTurn]
).
*/


/*
Bridge = Bridge[0][0][WestTurn],
Bridge[nWest:T][nEast:T][turn:TurnOpts] = (
 when (nWest == 0 && nEast < N && turn == EastTurn) east[ID].enter -> Bridge[nWest][nEast + 1][WestTurn]
| when (nEast > 0) east[ID].exit -> Bridge[nWest][nEast - 1][WestTurn]
| when (nEast == 0 && nWest < N && turn == WestTurn) west[ID].enter -> Bridge[nWest+1][nEast][EastTurn]
| when (nWest > 0) west[ID].exit -> Bridge[nWest-1][nEast][EastTurn]
).
*/


//Bridge - politness & strict order combined
Bridge = Bridge[0][0][0][0][0],
Bridge[nWest:T][nEast:T][nWestReq:T][nEastReq:T][turn:TurnOpts] = (
east[ID].request -> Bridge[nWest][nEast][nWestReq][nEastReq+1][turn]
| west[ID].request -> Bridge[nWest][nEast][nWestReq+1][nEastReq][turn]
| when (nWest == 0 && nEast < N && (nWestReq==0 || turn==EastTurn)) 
	east[ID].enter -> Bridge[nWest][nEast+1][nWestReq][nEastReq-1][WestTurn]
| when (nEast > 0) 
	east[ID].exit -> Bridge[nWest][nEast-1][nWestReq][nEastReq][turn]
| when (nEast == 0 && nWest < N && (nEastReq==0 || turn==WestTurn)) 
	west[ID].enter -> Bridge[nWest+1][nEast][nWestReq-1][nEastReq][EastTurn]
| when (nWest > 0) 
	west[ID].exit -> Bridge[nWest-1][nEast][nWestReq][nEastReq][turn]).

||SingleLane = (Cars || Bridge).
||CheckSingleLane = (SingleLane || SingleCarOnBridge).

progress WestCross = {west[ID].enter}
progress EastCross = {east[ID].enter}

||CongestedBridge = (SingleLane) >> {west[ID].exit, east[ID].exit}.
