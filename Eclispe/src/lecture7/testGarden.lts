const N = 2
range T = 0..N
//Memory process
MEMORY = MEMORY[0],
MEMORY[u:T] = (read[u] -> MEMORY[u] | write[v:T] ->MEMORY[v]).

//Turnstile process
TURNSTILE = (go -> write[0] -> RUN),
RUN = (arrive -> INCREMENT),
INCREMENT = (read[v:0..N-1] -> write[v+1] -> RUN | read[N] -> TURNSTILE).

//Garden process (first version)
//||GARDEN = (east:TURNSTILE || west:TURNSTILE || {east,west}::MEMORY)

//Garden process
||GARDEN = (east:TURNSTILE || west:TURNSTILE || {east, west}::MEMORY)/{reset/{east, west}.write[0],go/{east, west}.go, east.return/east.read[N],west.return/west.read[N]}.


/*
//TEST WITH ERROR STATE
TEST = TEST[0],
TEST[v:T] = ({east, west}.write[u:1..N] -> TEST[v+1] | reset -> TEST[0] | when v > N wrong -> ERROR).

||TESTGARDEN = (GARDEN || TEST).
*/

//TEST
TEST = TEST[0],
TEST[v:T] = ({east, west}.write[u:1..N] -> TEST[v+1] | reset -> TEST[0]).


||TESTGARDEN = (GARDEN || TEST).