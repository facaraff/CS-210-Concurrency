const N = 2
range T = 0..N
range ID = 1..N

Car = (request -> enter -> exit -> Car).


property EntranceOrder = EntranceOrder[1],
EntranceOrder[id:ID] = ([id].enter -> EntranceOrder[id%N+1]).

property ExitOrder = ExitOrder[1],
ExitOrder[id:ID] = ([id].exit -> ExitOrder[id%N+1]).

||Convoy = ([ID]:Car).

||CheckConvoy = (Convoy || EntranceOrder || ExitOrder).

Entrance = Entrance[1],
Entrance[i:ID] = ([i].enter -> Entrance[i%N+1]).
Exit = Exit[1],
Exit[i:ID] = ([i].exit -> Exit[i%N+1]).
||FixedConvoy = ([ID]:Car || Entrance || Exit).
||CheckFixedConvoy = (FixedConvoy || EntranceOrder || ExitOrder).
||Cars = ({west, east}:FixedConvoy).

property SingleCarOnBridge = (west[ID].enter -> CountWest[1]
							| east[ID].enter -> CountEast[1]),
CountWest[i:ID] = (west[ID].enter -> CountWest[i+1]
					| when i>1 west[ID].exit -> CountWest[i-1]
					| when i==1 west[ID].exit -> SingleCarOnBridge),
CountEast[i:ID] = (east[ID].enter -> CountEast[i+1]
					| when i>1 east[ID].exit -> CountEast[i-1]
					| when i==1 east[ID].exit -> SingleCarOnBridge).
||CheckCars = (Cars||SingleCarOnBridge).


Bridge = Bridge[0][0],
Bridge[nWest:T][nEast:T] = (
when (nWest == 0 && nEast<N) east[ID].enter -> Bridge[nWest][nEast + 1]
| when (nEast>0) east[ID].exit -> Bridge[nWest][nEast - 1]
| when (nEast==0 && nWest<N) west[ID].enter -> Bridge[nWest+1][nEast]
| when (nWest>0) west[ID].exit -> Bridge[nWest-1][nEast]
).


||SingleLane = (Cars || Bridge).
||CheckSingleLane = (SingleLane || SingleCarOnBridge).


progress WestCross = {west[ID].enter}
progress EastCross = {east[ID].enter}

||CongestedBridge = (SingleLane) >> {west[ID].exit, east[ID].exit}.
